{"version":3,"sources":["api/index.js","components/PokeCard.js","components/PokeDash.js","App.js","reducer/reducer.js","store/store.js","serviceWorker.js","index.js","logo.svg"],"names":["loadPokedata","a","axios","get","then","res","result","data","indiPoke","pokemon","url","result2","sprites","front_shiny","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","title","height","top","objectFit","overflow","connect","state","ownProps","score","dispatch","action","type","payload","props","React","useRef","classes","useState","correct","typedValue","setState","anchorEl","setAnchorEl","useEffect","purl","poke","somefunction","open","Boolean","Grid","item","xs","Paper","className","style","width","src","TextField","id","label","onChange","e","console","log","target","value","name","Button","variant","onClick","currentTarget","Popper","placement","backgroundColor","getPokeData","pokeData","currentPage","setCurrentPage","pokePerPage","pdata","results","indexOfLastPoke","indexOfFirstPoke","currentPokes","slice","container","AppBar","position","Toolbar","alignContent","justifyContent","justify","map","Pagination","count","page","event","App","path","component","PokeDash","initialState","store","createStore","newState","applyMiddleware","thunk","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"+NAEO,SAAeA,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEAECC,IACHC,IAAI,gDACJC,MAAK,SAACC,GAAD,OAAUC,EAASD,EAAIE,QAJ1B,gCAMED,GANF,4C,sBAQA,IAAME,EAAQ,uCAAG,WAAOC,GAAP,eAAAR,EAAA,sEAGhBC,IACHC,IAAIM,EAAQC,KACZN,MAAK,SAACC,GACLM,EAAUN,EAAIE,KAAKK,QAAQC,eAE5BT,OARmB,gCAUfO,GAVe,2CAAH,sD,2FCCfG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BC,MAAO,CACLP,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,UAC1BE,OAAQ,QACRC,IAAK,MACLC,UAAW,QACXC,SAAU,cAiGCC,mBAdf,SAAyBC,EAAOC,GAC9B,MAAO,CACLC,MAAOF,EAAME,UAIjB,SAA4BC,GAC1B,MAAO,CACLC,OAAQ,WACND,EAAS,CAAEE,KAAM,YAAaC,QAAS,QAK9BP,EA9FE,SAACQ,GACEC,IAAMC,OAAO,MAA/B,IACMC,EAAU7B,IAFU,EAGA8B,mBAAS,CACjClC,IAAK,GACLmC,SAAS,EACTC,WAAY,GACZX,MAAO,KAPiB,mBAGnBF,EAHmB,KAGZc,EAHY,OASMN,IAAMG,SAAS,MATrB,mBASnBI,EATmB,KASTC,EATS,KAU1BC,qBAAU,YACU,uCAAG,8BAAAjD,EAAA,2DACbkD,EAAOX,EAAMY,MADA,gCAIC5C,EAAS2C,GAJV,OAIXzC,EAJW,OAKjBqC,EAAS,CAAErC,IAAKA,IALC,2CAAH,qDAQlB2C,KACC,CAACb,EAAMY,OAEV,IAcME,EAAOC,QAAQP,GACrB,OACE,kBAACQ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,KACb,kBAACC,EAAA,EAAD,CACEC,UAAWjB,EAAQxB,MACnB0C,MAAO,CAAEjC,OAAQ,QAASkC,MAAO,UAEjC,yBAAKC,IAAK9B,EAAMvB,OACduB,EAAMY,SACN,kBAACmB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,oBACNC,SA1BW,SAACC,GACpBC,QAAQC,IAAI,QAASF,EAAEG,OAAOC,OAC1BJ,EAAEG,OAAOC,OAAShC,EAAMY,KAAKqB,MAC/B1B,EAAS,2BAAKd,GAAN,IAAaa,WAAYsB,EAAEG,OAAOC,aA0BtCvC,EAAMY,SACN,kBAAC6B,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAxBf,SAACR,GACfnC,EAAMa,YAAcN,EAAMY,KAAKqB,MACjC1B,EAAS,2BAAKd,GAAN,IAAaY,SAAS,KAC9BL,EAAMH,UAENY,EAAYD,EAAW,KAAOoB,EAAES,iBAmB5B,YAIA5C,EAAMY,SACN,kBAACiC,EAAA,EAAD,CACEb,GAAI,gBACJX,KAAMA,EACNN,SAAUA,EACV+B,UAAW,QAEX,yBAAKlB,MAAO,CAAEmB,gBAAiB,UAAWpD,OAAQ,SAAlD,0BAMHK,EAAMY,SACL,6BACE,kBAAC,IAAD,MACA,2DACA,kBAAC6B,EAAA,EAAD,CAAQC,QAAQ,YAAhB,iC,2BCxFN7D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BC,MAAO,CACLP,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,UAC1BE,OAAQ,QACRC,IAAK,MACLC,UAAW,QACXC,SAAU,cAGRkD,EAAW,uCAAG,4BAAAhF,EAAA,sEACCD,IADD,cACZO,EADY,yBAGXA,GAHW,2CAAH,qDAuFFyB,mBARf,SAAyBC,EAAOC,GAC9B,MAAO,CACLC,MAAOF,EAAME,UAIjB,SAA4BC,MAEbJ,EAjFE,SAACQ,GAChB,IAAMG,EAAU7B,IADU,EAEA8B,mBAAS,CACjCsC,SAAU,KAHc,mBAEnBjD,EAFmB,KAEZc,EAFY,OAKYH,mBAAS,GALrB,mBAKnBuC,EALmB,KAKNC,EALM,OAMYxC,mBAAS,GANrB,mBAMnByC,EANmB,UAO1BnC,oBAAS,sBAAC,4BAAAjD,EAAA,sEACYgF,IADZ,OACFK,EADE,OAERvC,EAAS,CAAEmC,SAAUI,EAAMC,UAFnB,2CAGP,IAEH,IAUMC,EAAkBL,EAAcE,EAChCI,EAAmBD,EAAkBH,EACrCK,EAAezD,EAAMiD,SAASS,MAAMF,EAAkBD,GAE5D,OACE,kBAAChC,EAAA,EAAD,CAAMoC,WAAS,EAACvE,QAAS,GACvB,kBAACmC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACmC,EAAA,EAAD,CACEC,SAAS,SACTjC,MAAO,CAAEjC,OAAQ,OAAQN,UAAW,WAEpC,kBAACyE,EAAA,EAAD,CACElC,MAAO,CACLvC,UAAW,SACX0E,aAAc,SACdC,eAAgB,WAGlB,0CAAgBzD,EAAML,UAI5B,kBAACqB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAOC,UAAWjB,EAAQhB,OACxB,yBACEoC,IAAI,gEACJD,MAAM,SACNlC,OAAO,OACPiC,MAAO,OAIZQ,QAAQC,IAAIrC,EAAMiD,UAClBb,QAAQC,IAAI,eAAgBoB,GAC7B,kBAAClC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACF,EAAA,EAAD,CAAMoC,WAAS,EAACM,QAAQ,SAAS7E,QAAS,GACvCqE,GACCA,EAAaS,KAAI,SAAC1F,GAChB,OAAO,kBAAC,EAAD,CAAU2C,KAAM3C,SAI/B,kBAAC2F,EAAA,EAAD,CACEC,MAAO,GACP9E,MAAM,UACN+E,KAAMnB,EACNhB,SAnDe,SAACoC,EAAO/B,GAC3BH,QAAQC,IAAI,QAASE,GACrBY,EAAeZ,UCvCJgC,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,M,QCf3BC,EAAe,CACnBzE,MAAO,G,YCGI0E,EAAQC,aDDN,WAAgD,IAA/B7E,EAA8B,uDAAtB2E,EAAcvE,EAAQ,uCACxD0E,EAAQ,eAAQ9E,GAEpB,OAAQI,EAAOC,MACb,IAAK,YACH+B,QAAQC,IAAI,4BAA6ByC,GACzCA,EAAS5E,MAAQ4E,EAAS5E,MAAQ,EAClCkC,QAAQC,IAAI,yCAA0CyC,GAK1D,OAAOA,ICXiCC,YAAgBC,MCQtC1D,QACW,cAA7B2D,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,EAAD,CAAKhD,MAAO,CAAEmB,gBAAiB,YAEjCwC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxH,MAAK,SAAAyH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.82f5230f.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport async function loadPokedata() {\n  let result;\n  await axios\n    .get(\"https://pokeapi.co/api/v2/pokemon/?limit=792\")\n    .then((res) => (result = res.data));\n  //   console.log(\"in api\", result);\n  return result;\n}\nexport const indiPoke = async (pokemon) => {\n  let result2;\n  // console.log(\"in indiURL\", pokemon.url);\n  await axios\n    .get(pokemon.url)\n    .then((res) => {\n      result2 = res.data.sprites.front_shiny;\n    })\n    .then();\n\n  return result2;\n};\n\nexport function getPokemon({ url }) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        resolve(data);\n      });\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { indiPoke, getPokemon } from \"../api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Portal from \"@material-ui/core/Portal\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport Button from \"@material-ui/core/Button\";\nimport Popper from \"@material-ui/core/Popper\";\nimport { connect } from \"react-redux\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  title: {\n    padding: theme.spacing(0),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    height: \"200px\",\n    top: \"opx\",\n    objectFit: \"cover\",\n    overflow: \"hidden\",\n  },\n}));\nconst PokeCard = (props) => {\n  const container = React.useRef(null);\n  const classes = useStyles();\n  const [state, setState] = useState({\n    url: \"\",\n    correct: false,\n    typedValue: \"\",\n    score: \"\",\n  });\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  useEffect(() => {\n    const somefunction = async () => {\n      const purl = props.poke;\n\n      if (purl) {\n        const url = await indiPoke(purl);\n        setState({ url: url });\n      }\n    };\n    somefunction();\n  }, [props.poke]);\n\n  const handleChange = (e) => {\n    console.log(\"value\", e.target.value);\n    if (e.target.value == props.poke.name) {\n      setState({ ...state, typedValue: e.target.value });\n    }\n  };\n  const handleClick = (e) => {\n    if (state.typedValue == props.poke.name) {\n      setState({ ...state, correct: true });\n      props.action();\n    } else {\n      setAnchorEl(anchorEl ? null : e.currentTarget);\n    }\n  };\n  const open = Boolean(anchorEl);\n  return (\n    <Grid item xs={2.4}>\n      <Paper\n        className={classes.paper}\n        style={{ height: \"200px\", width: \"400px\" }}\n      >\n        <img src={state.url}></img>\n        {!state.correct && (\n          <TextField\n            id=\"standard-basic\"\n            label=\"Guess the pokemon\"\n            onChange={handleChange}\n          />\n        )}\n        {!state.correct && (\n          <Button variant=\"outlined\" onClick={handleClick}>\n            POKE GO\n          </Button>\n        )}\n        {!state.correct && (\n          <Popper\n            id={\"simple-popper\"}\n            open={open}\n            anchorEl={anchorEl}\n            placement={\"left\"}\n          >\n            <div style={{ backgroundColor: \"#e57373\", height: \"20px\" }}>\n              wrong guess try again\n            </div>\n          </Popper>\n        )}\n\n        {state.correct && (\n          <div>\n            <DoneOutlineIcon></DoneOutlineIcon>\n            <span>correct you got a score! </span>\n            <Button variant=\"outlined\">View more about pokemon</Button>\n          </div>\n        )}\n      </Paper>\n    </Grid>\n  );\n};\nfunction mapStateToProps(state, ownProps) {\n  return {\n    score: state.score,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: () => {\n      dispatch({ type: \"ADD_SCORE\", payload: 1 });\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokeCard);\n","import React, { useState, useEffect } from \"react\";\n\nimport { loadPokedata } from \"../api\";\nimport { indiPoke, getPokemon } from \"../api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport axios from \"axios\";\nimport PokeCard from \"./PokeCard\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { connect } from \"react-redux\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  title: {\n    padding: theme.spacing(0),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    height: \"200px\",\n    top: \"opx\",\n    objectFit: \"cover\",\n    overflow: \"hidden\",\n  },\n}));\nconst getPokeData = async () => {\n  const data = await loadPokedata();\n\n  return data;\n};\n\nconst PokeDash = (props) => {\n  const classes = useStyles();\n  const [state, setState] = useState({\n    pokeData: \"\",\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pokePerPage, setPokePerPage] = useState(6);\n  useEffect(async () => {\n    const pdata = await getPokeData();\n    setState({ pokeData: pdata.results });\n  }, []);\n\n  const imageurl = async (pokemon) => {\n    let url;\n    url = await indiPoke(pokemon);\n    return url;\n  };\n  const handleChange = (event, value) => {\n    console.log(\"value\", value);\n    setCurrentPage(value);\n  };\n  //get current poke\n  const indexOfLastPoke = currentPage * pokePerPage;\n  const indexOfFirstPoke = indexOfLastPoke - pokePerPage;\n  const currentPokes = state.pokeData.slice(indexOfFirstPoke, indexOfLastPoke);\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <AppBar\n          position=\"static\"\n          style={{ height: \"50px\", textAlign: \"center\" }}\n        >\n          <Toolbar\n            style={{\n              textAlign: \"center\",\n              alignContent: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <p> Your Score {props.score}</p>\n          </Toolbar>\n        </AppBar>\n      </Grid>\n      <Grid item xs={12}>\n        <Paper className={classes.title}>\n          <img\n            src=\"http://www.pngnames.com/files/5/Pokemon-Logo-PNG-Free-Pic.png\"\n            width=\"33.33%\"\n            height=\"100%\"\n            style={{}}\n          />\n        </Paper>\n      </Grid>\n      {console.log(state.pokeData)}\n      {console.log(\"currentpokes\", currentPokes)}\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={8}>\n          {currentPokes &&\n            currentPokes.map((pokemon) => {\n              return <PokeCard poke={pokemon} />;\n            })}\n        </Grid>\n      </Grid>\n      <Pagination\n        count={66}\n        color=\"primary\"\n        page={currentPage}\n        onChange={handleChange}\n      />\n    </Grid>\n  );\n};\nfunction mapStateToProps(state, ownProps) {\n  return {\n    score: state.score,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokeDash);\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport PokeDash from \"./components/PokeDash\";\nfunction App() {\n  return (\n    <Router>\n      <Route />\n      <Route path=\"/\" component={PokeDash} />\n    </Router>\n  );\n}\n\nexport default App;\n","const initialState = {\n  score: 0,\n};\nexport default function Reducer(state = initialState, action) {\n  let newState = { ...state };\n\n  switch (action.type) {\n    case \"ADD_SCORE\":\n      console.log(\"hi im in reducer state is\", newState);\n      newState.score = newState.score + 1;\n      console.log(\"hi im in reducer state after adding is\", newState);\n      break;\n\n    default:\n  }\n  return newState;\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport Reducer from \"../reducer/reducer\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(Reducer, applyMiddleware(thunk));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App style={{ backgroundColor: \"black\" }} />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}